#include<iostream>
#pragma once
#ifndef MATRIX_H
#define MATRIX_H
#include <vector>
using namespace std;
template <typename Object>
class matrix
{
public:

	//无参构造函数
	matrix()
	{
		array.resize(2);
		for (vector<Object>& thisRow : array)
			thisRow.resize(2);
	}
	matrix(int rows, int cols) : array(rows)
	{
		for (auto& thisRow : array)
			thisRow.resize(cols);
	}
	matrix(vector<vector <Object> > v) : array{ v } {}
	matrix(vector<vector <Object> > && v) : array{ std::move(v) } { }

	//resize函数
	void resize(int rows, int cols)
	{
		array.resize(rows);
		for (vector<Object>& thisRow : array)
		{
			thisRow.resize(cols);
		}
	}

	const vector<Object>& operator[](int row) const
	{
		return array[row];
	}
	vector<Object>& operator[](int row)
	{
		return array[row];
	}
	int numrows() const
	{
		return array.size();
	}
	int numcols() const
	{
		return numrows() ? array[0].size() : 0;
	}
private:
	vector<vector<Object>> array;
};
#endif
int main()
{

	matrix<char> a(3, 2);
	cout << a.numrows() << ' ' << a.numcols() << endl;
	a.resize(4, 2);
	cout << a.numrows() << ' ' << a.numcols() << endl;
	matrix<int> b;
	cout << b.numrows() << ' ' << b.numcols() << endl;

	system("pause");
}
